From 1a0ed7f0bc79d40788829af7c5837c7dfa500408 Mon Sep 17 00:00:00 2001
From: Kang Li <kanglictf@gmail.com>
Date: Mon, 21 Aug 2017 16:12:12 +0000
Subject: [PATCH] Catch invalid length of dwarf debug frame

GDB fails to catch an invalid length informaiton in dwarf debug frame
FDE headers. A carefully created ELF file or core file can cause gdb to
terminate the debug session due to memory exhausted error.

This bug was found by Kang Li <kanglictf@gmail.com> and Yue Yin
<yinyueacm@gmail.com>.  We also thank Guodong Zhu for help
troubleshooting.

This bug was found and verified on 32-bit Ubuntu 14.04 LTS (and tested
on Ubuntu 12.04.5 as well)

The software was checkout from git://sourceware.org/git/binutils-gdb.git
on 2017/06/14 and the latest commit
f7e16c2a9cc405707e646e951397938d2b4eea48

The package was built with gcc 4.8.3 .

* Two ways to reproduce the error

  Method A:

  1. Use gdb to open a malformed core file (file cb and core are in
  attachment) $ gdb cb core

  2. after sometime, gdb will show virtual memory exhausted error.

  Method B:

  1. Use gdb to load a malformed ELF binary (file trouble_bin is in
  attachment) $ gdb trouble_bin

  2. Set a breakpoint. It does not matter where as long as it will be
  hit at run time.  In this example, we put a breakpoint at the start of
  .init section.

  (gdb) br *0x80482b0 3. run and gdb will show virtual memory exhausted
  error after it hit a breakpoint.

Bug described on:

https://sourceware.org/bugzilla/show_bug.cgi?id=21600

Signed-off-by: Yue Yin <yinyueacm@gmail.com>
Signed-off-by: Kang Li <kanglictf@gmail.com>
---
 gdb/dwarf2-frame.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/gdb/dwarf2-frame.c b/gdb/dwarf2-frame.c
index aaf3aee33d..2f5a936e9a 100644
--- a/gdb/dwarf2-frame.c
+++ b/gdb/dwarf2-frame.c
@@ -1793,6 +1793,9 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,
   buf += bytes_read;
   end = buf + length;
 
+    if(end <= buf)
+        return NULL;
+
   /* Are we still within the section?  */
   if (end > unit->dwarf_frame_buffer + unit->dwarf_frame_size)
     return NULL;
-- 
2.14.1

